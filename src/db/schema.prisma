generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  DATA_ENTRY
  SUPERVISOR
  MANAGER
  AUDITOR
}

enum Destination {
  MAIS
  FOZAN
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  VIEW
}

enum ReportType {
  MONTHLY
  YEARLY
  CUSTOM
  AUDIT
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

enum BackupFileType {
  CSV
  JSON
  SQL
}

enum BackupStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

// Models
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String
  role          UserRole  @default(DATA_ENTRY)
  isActive      Boolean   @default(true)
  preferences   Json?     @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  inventoryItems InventoryItem[]
  auditLogs      AuditLog[]
  reports        Report[]
  backups        Backup[]
  systemSettings SystemSettings[]
  
  @@index([email])
  @@map("users")
}

model InventoryItem {
  id          String      @id @default(uuid())
  itemName    String
  batch       String
  quantity    Int
  reject      Int         @default(0)
  destination Destination
  category    String?
  notes       String?     @db.Text
  enteredBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [enteredBy], references: [id], onDelete: Cascade)
  auditLogs   AuditLog[]
  
  @@index([itemName])
  @@index([batch])
  @@index([createdAt])
  @@index([itemName, batch])
  @@index([createdAt, destination])
  @@map("inventory_items")
}

model AuditLog {
  id            String       @id @default(uuid())
  userId        String
  action        AuditAction
  entityType    String
  entityId      String?
  oldValue      Json?
  newValue      Json?
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime     @default(now())
  
  // Relations
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem? @relation(fields: [entityId], references: [id], onDelete: SetNull)
  
  @@index([userId, timestamp])
  @@index([entityType, entityId])
  @@index([timestamp])
  @@map("audit_logs")
}

model Report {
  id           String       @id @default(uuid())
  title        String
  type         ReportType
  periodStart  DateTime
  periodEnd    DateTime
  generatedBy  String
  fileUrl      String?
  dataSnapshot Json
  aiInsights   String?      @db.Text
  status       ReportStatus @default(GENERATING)
  createdAt    DateTime     @default(now())
  
  // Relations
  user         User         @relation(fields: [generatedBy], references: [id], onDelete: Cascade)
  
  @@index([type, periodStart])
  @@index([createdAt])
  @@map("reports")
}

model Backup {
  id          String         @id @default(uuid())
  fileName    String
  fileSize    Int
  fileType    BackupFileType
  recordCount Int
  storagePath String
  status      BackupStatus   @default(IN_PROGRESS)
  createdAt   DateTime       @default(now())
  createdBy   String
  
  // Relations
  user        User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([createdAt])
  @@map("backups")
}

model SystemSettings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Json
  category  String
  updatedBy String
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [updatedBy], references: [id], onDelete: Cascade)
  
  @@map("system_settings")
}
